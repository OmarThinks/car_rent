{
	"info": {
		"name": "car_rent_postman_local",
		"description": "A collection to test cantiin api endpoints on the local server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) clear_tables",
			"item": [
				{
					"name": "clear_tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Success is True\", () => {\r",
									"  pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/clear_tables",
							"host": [
								"{{host}}"
							],
							"path": [
								"clear_tables"
							]
						}
					},
					"response": [
						{
							"name": "{{host}}/clear_tables",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/clear_tables",
									"host": [
										"{{host}}"
									],
									"path": [
										"clear_tables"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Access-Control-allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-allow-Headers",
									"value": "Content-Type,Autorization,true"
								},
								{
									"key": "Access-Control-allow-Methods",
									"value": "GET,PUT,POST,DELETE,OPTIONS"
								},
								{
									"key": "Server",
									"value": "Werkzeug/1.0.1 Python/3.8.6"
								},
								{
									"key": "Date",
									"value": "Wed, 16 Dec 2020 18:45:25 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true\n}"
						}
					]
				}
			],
			"description": "The clear_tables Endpoint"
		},
		{
			"name": "2) populate",
			"item": [
				{
					"name": "populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"pm.test(\"Success is True\", () => {\r",
									"  pm.expect(responseJson.success).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/populate",
							"host": [
								"{{host}}"
							],
							"path": [
								"populate"
							]
						}
					},
					"response": []
				}
			],
			"description": "The populate endpoint"
		},
		{
			"name": "3)user",
			"item": [
				{
					"name": "post_users",
					"item": [
						{
							"name": "post_user:fail 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"detail\": \"Unsupported media type '' in request. 'application/json' is required.\"\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_user:fail 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 2:\r",
											"request body can not be parsed to JSON\r",
											"*/\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"error\": 400,\r",
											"    \"message\": \"bad request\",\r",
											"    \"success\": false\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_user:fail 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 3:\r",
											"All required fields are missing.\r",
											"Just testing the pydatic errors.\r",
											"*/\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"validation_error\": {\r",
											"        \"body_params\": [\r",
											"            {\r",
											"                \"loc\": [\r",
											"                    \"username\"\r",
											"                ],\r",
											"                \"msg\": \"field required\",\r",
											"                \"type\": \"value_error.missing\"\r",
											"            },\r",
											"            {\r",
											"                \"loc\": [\r",
											"                    \"password1\"\r",
											"                ],\r",
											"                \"msg\": \"field required\",\r",
											"                \"type\": \"value_error.missing\"\r",
											"            },\r",
											"            {\r",
											"                \"loc\": [\r",
											"                    \"password2\"\r",
											"                ],\r",
											"                \"msg\": \"field required\",\r",
											"                \"type\": \"value_error.missing\"\r",
											"            }\r",
											"        ]\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_user:successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"success\": true,\r",
											"    \"user\": {\r",
											"        \"id\": 7,\r",
											"        \"username\": \"abcdef\"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");\r",
											"\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"abc\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"abcdef\",\r\n    \"password1\":\"abc123456\",\r\n    \"password2\":\"abc123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_users",
					"item": [
						{
							"name": "post_user:successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"success\": true,\r",
											"    \"user\": {\r",
											"        \"id\": 8,\r",
											"        \"username\": \"abcdefg\"\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");\r",
											"\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"abc\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"abcdefg\",\r\n    \"password1\":\"abc123456\",\r\n    \"password2\":\"abc123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_users:successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"output as expected\", () => {\r",
											"  pm.expect(responseJson.result).to.eql(\"user deleted successfully\");\r",
											"  pm.expect(responseJson.success).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjgsImV4cCI6MTYxNDQzODk3OC41MjM1NDF9.6ZJ95vK6frtHa59N2Jpd_az4kZADwRrGgSnbKCT_Yjs",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_users:fail:without auth cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"const responseJson = pm.response.json();\r",
											"pm.test(\"output as expected\", () => {\r",
											"  pm.expect(responseJson.error).to.eql(401);\r",
											"  pm.expect(responseJson.message).to.eql(\"unauthorized\");\r",
											"  pm.expect(responseJson.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjgsImV4cCI6MTYxNDQzODk3OC41MjM1NDF9.6ZJ95vK6frtHa59N2Jpd_az4kZADwRrGgSnbKCT_Yjs",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "this endpoint will delete the product with the given id"
				},
				{
					"name": "login_users",
					"item": [
						{
							"name": "login_users:fail:pydantic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"Fail 1:\r",
											"in this case, there is no request body\r",
											"*/\r",
											"\r",
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson).to.eql(\r",
											"        \r",
											"\r",
											"{\r",
											"    \"validation_error\": {\r",
											"        \"body_params\": [\r",
											"            {\r",
											"                \"loc\": [\r",
											"                    \"username\"\r",
											"                ],\r",
											"                \"msg\": \"field required\",\r",
											"                \"type\": \"value_error.missing\"\r",
											"            },\r",
											"            {\r",
											"                \"ctx\": {\r",
											"                    \"limit_value\": 5\r",
											"                },\r",
											"                \"loc\": [\r",
											"                    \"password\"\r",
											"                ],\r",
											"                \"msg\": \"ensure this value has at least 5 characters\",\r",
											"                \"type\": \"value_error.any_str.min_length\"\r",
											"            }\r",
											"        ]\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											");});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\":\"abc\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login_users:success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    \r",
											"    pm.expect(responseJson.result).to.eql(\"logged in successfully\");\r",
											"    pm.expect(responseJson.user_id).to.eql(3);\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"abc\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"klmn\",\r\n    \"password\":\"fde123987byt\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "logout_users",
					"item": [
						{
							"name": "login_users:success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseJson.success).to.eql(true);\r",
											"    \r",
											"    pm.expect(responseJson.result).to.eql(\"logged in successfully\");\r",
											"    pm.expect(responseJson.user_id).to.eql(3);\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"abc\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"klmn\",\r\n    \"password\":\"fde123987byt\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout_users:success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"logged out successfully\",\r",
											"    \"success\": true\r",
											"}    \r",
											"\r",
											"    );\r",
											"    pm.expect((pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql((\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"abc\",\r\n    \"password\":\"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout_users:success Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"logged out successfully\",\r",
											"    \"success\": true\r",
											"}    \r",
											"\r",
											"    );\r",
											"    pm.expect((pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql((\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"abc\",\r\n    \"password\":\"123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/users/logout",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "login test",
					"item": [
						{
							"name": "login test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"logged in successfully\",\r",
											"    \"success\": true,\r",
											"    \"user_id\":1\r",
											"}    \r",
											"\r",
											"    );\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/users/login/test",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"login",
										"test"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users_who",
					"item": [
						{
							"name": "users_who:fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"error\": 401,\r",
											"    \"message\": \"unauthorized\",\r",
											"    \"success\": false\r",
											"}    \r",
											"\r",
											"    );\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/users/who",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"who"
									]
								}
							},
							"response": []
						},
						{
							"name": "users_who:successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"user is logged in\",\r",
											"    \"success\": true,\r",
											"    \"user_id\":1\r",
											"}    \r",
											"\r",
											"    );\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjEsImV4cCI6MTYxNDQ1MDQzNC41NzU4MTZ9.t9Cl19rBx3DteIVCj8nZmlT8FXtwpqW_abTN8-MGLOM",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/users/who",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"who"
									]
								}
							},
							"response": []
						},
						{
							"name": "set expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"setting expired token successfully\",\r",
											"    \"success\": true\r",
											"}   \r",
											"\r",
											"    );\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/users/login/expired",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"login",
										"expired"
									]
								}
							},
							"response": []
						},
						{
							"name": "users_who:expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"output as expected\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.eql(\r",
											"\r",
											"{\r",
											"    \"result\": \"refreshed expired token\",\r",
											"    \"success\": true,\r",
											"    \"user_id\": 1\r",
											"}  \r",
											"\r",
											"    );\r",
											"    pm.expect(typeof(pm.response.headers.get(\"Authorization\")))\r",
											"    .to.eql(typeof(\"\"));\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOjEsImV4cCI6MTYxMzI0MzI3NS41NDAzNzR9.-UTW8fgfFYGwL-YLBfqCBGhBzX5WzzLLC6EVHExl1aA",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}/users/who",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										"who"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		}
	]
}